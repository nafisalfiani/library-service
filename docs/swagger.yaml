definitions:
  entity.Book:
    properties:
      category_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      rental_cost:
        type: number
      rental_details:
        items:
          $ref: '#/definitions/entity.RentalDetail'
        type: array
      stock_availability:
        type: integer
    type: object
  entity.BookRequest:
    properties:
      category_name:
        type: string
      description:
        type: string
      name:
        type: string
      rental_cost:
        type: number
      stock_availability:
        type: integer
    required:
    - category_name
    - description
    - name
    - rental_cost
    - stock_availability
    type: object
  entity.HttpResp:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
  entity.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  entity.LoginResponse:
    properties:
      token:
        type: string
    type: object
  entity.Payment:
    properties:
      amount:
        type: number
      id:
        type: integer
      payment_date:
        type: string
      payment_method:
        type: string
      status:
        type: string
      type:
        type: string
      user_id:
        type: integer
      xendit_payment_id:
        type: string
      xendit_payment_url:
        type: string
    type: object
  entity.PaymentRequest:
    properties:
      amount:
        type: number
    type: object
  entity.RegisterRequest:
    properties:
      deposit_amount:
        type: number
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - deposit_amount
    - email
    - full_name
    - password
    - role
    - username
    type: object
  entity.Rental:
    properties:
      id:
        type: integer
      payment:
        $ref: '#/definitions/entity.Payment'
      payment_id:
        type: integer
      rental_date:
        type: string
      rental_details:
        items:
          $ref: '#/definitions/entity.RentalDetail'
        type: array
      status:
        type: string
      user_id:
        type: integer
    type: object
  entity.RentalDetail:
    properties:
      book_id:
        type: integer
      book_name:
        type: string
      id:
        type: integer
      rental_cost:
        type: number
      rental_duration:
        type: integer
      rental_id:
        type: integer
      return_date:
        type: string
      returned:
        type: boolean
    type: object
  entity.RentalRequest:
    properties:
      books:
        items:
          $ref: '#/definitions/entity.RentalRequestDetail'
        type: array
      payment_method:
        type: string
    required:
    - books
    - payment_method
    type: object
  entity.RentalRequestDetail:
    properties:
      book_id:
        type: integer
      rental_duration:
        type: integer
    required:
    - book_id
    - rental_duration
    type: object
  entity.User:
    properties:
      deposit_amount:
        type: number
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      payments:
        items:
          $ref: '#/definitions/entity.Payment'
        type: array
      rentals:
        items:
          $ref: '#/definitions/entity.Rental'
        type: array
      role:
        type: string
      username:
        type: string
    type: object
  entity.XenditCheckPayment:
    properties:
      payment_id:
        type: string
      xendit_payment_id:
        type: string
    type: object
info:
  contact:
    email: nafisa.alfiani.ica@gmail.com
    name: Nafisa Alfiani
paths:
  /books:
    get:
      consumes:
      - application/json
      description: returns list of books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entity.HttpResp'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Book'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.HttpResp'
      security:
      - BearerAuth: []
      summary: List books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Creates new books
      parameters:
      - description: book request
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/entity.BookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.HttpResp'
      security:
      - BearerAuth: []
      summary: Create books
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete specific books
      parameters:
      - description: book id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.HttpResp'
      security:
      - BearerAuth: []
      summary: Delete book
      tags:
      - books
    get:
      consumes:
      - application/json
      description: returns specific books
      parameters:
      - description: book id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.HttpResp'
      security:
      - BearerAuth: []
      summary: Get specific books
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Updates specific book
      parameters:
      - description: book id
        in: path
        name: id
        required: true
        type: string
      - description: book request
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/entity.BookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.HttpResp'
      security:
      - BearerAuth: []
      summary: Update book
      tags:
      - books
  /deposits:
    post:
      consumes:
      - application/json
      description: Top up logged in user deposit
      parameters:
      - description: deposit request
        in: body
        name: deposit
        required: true
        schema:
          $ref: '#/definitions/entity.PaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.HttpResp'
      security:
      - BearerAuth: []
      summary: Top up user deposit
      tags:
      - deposits
  /payments:
    get:
      consumes:
      - application/json
      description: List of payment
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.HttpResp'
      security:
      - BearerAuth: []
      summary: List of payment
      tags:
      - payments
    post:
      consumes:
      - application/json
      description: Check and refresh payment status if applicable
      parameters:
      - description: payment request
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/entity.XenditCheckPayment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.HttpResp'
      security:
      - BearerAuth: []
      summary: Refresh payment status
      tags:
      - payments
  /rental:
    post:
      consumes:
      - application/json
      description: Get active rental of logged in user
      parameters:
      - description: rental request
        in: body
        name: rental
        required: true
        schema:
          $ref: '#/definitions/entity.RentalRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entity.HttpResp'
            - properties:
                data:
                  $ref: '#/definitions/entity.Rental'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.HttpResp'
      security:
      - BearerAuth: []
      summary: Create a rental
      tags:
      - rentals
  /rental/active:
    get:
      consumes:
      - application/json
      description: Get active rental of logged in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entity.HttpResp'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Rental'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.HttpResp'
      security:
      - BearerAuth: []
      summary: Get active rental
      tags:
      - rentals
  /rental/closed:
    get:
      consumes:
      - application/json
      description: Get closed rental of logged in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entity.HttpResp'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Rental'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.HttpResp'
      security:
      - BearerAuth: []
      summary: Get closed rental
      tags:
      - rentals
  /users:
    get:
      consumes:
      - application/json
      description: Get logged in user detail
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entity.HttpResp'
            - properties:
                data:
                  $ref: '#/definitions/entity.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.HttpResp'
      security:
      - BearerAuth: []
      summary: Fetch user detail
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Allow existing user to login
      parameters:
      - description: login request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/entity.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entity.HttpResp'
            - properties:
                data:
                  $ref: '#/definitions/entity.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.HttpResp'
      summary: Login existing user
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Allow new user to register their account info
      parameters:
      - description: register request
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/entity.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entity.HttpResp'
            - properties:
                data:
                  $ref: '#/definitions/entity.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.HttpResp'
      summary: Register new user
      tags:
      - users
  /webhooks/payment:
    post:
      consumes:
      - application/json
      description: Check and refresh payment status if applicable
      parameters:
      - description: payment request
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/entity.XenditCheckPayment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.HttpResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.HttpResp'
      security:
      - BearerAuth: []
      summary: Refresh payment status
      tags:
      - payments
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
