// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	entity "library/entity"

	mock "github.com/stretchr/testify/mock"
)

// RentalInterface is an autogenerated mock type for the RentalInterface type
type RentalInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: rental, paymentMethod
func (_m *RentalInterface) Create(rental entity.Rental, paymentMethod string) (entity.Rental, error) {
	ret := _m.Called(rental, paymentMethod)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.Rental
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Rental, string) (entity.Rental, error)); ok {
		return rf(rental, paymentMethod)
	}
	if rf, ok := ret.Get(0).(func(entity.Rental, string) entity.Rental); ok {
		r0 = rf(rental, paymentMethod)
	} else {
		r0 = ret.Get(0).(entity.Rental)
	}

	if rf, ok := ret.Get(1).(func(entity.Rental, string) error); ok {
		r1 = rf(rental, paymentMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: rentalId
func (_m *RentalInterface) Delete(rentalId int) error {
	ret := _m.Called(rentalId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(rentalId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListHistory provides a mock function with given fields:
func (_m *RentalInterface) ListHistory() ([]entity.Rental, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListHistory")
	}

	var r0 []entity.Rental
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Rental, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Rental); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Rental)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOutstanding provides a mock function with given fields:
func (_m *RentalInterface) ListOutstanding() ([]entity.Rental, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListOutstanding")
	}

	var r0 []entity.Rental
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Rental, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Rental); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Rental)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRentalInterface creates a new instance of RentalInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRentalInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RentalInterface {
	mock := &RentalInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
