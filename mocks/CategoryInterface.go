// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	entity "library/entity"

	mock "github.com/stretchr/testify/mock"
)

// CategoryInterface is an autogenerated mock type for the CategoryInterface type
type CategoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: category
func (_m *CategoryInterface) Create(category entity.Category) (entity.Category, error) {
	ret := _m.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Category) (entity.Category, error)); ok {
		return rf(category)
	}
	if rf, ok := ret.Get(0).(func(entity.Category) entity.Category); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Get(0).(entity.Category)
	}

	if rf, ok := ret.Get(1).(func(entity.Category) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: category
func (_m *CategoryInterface) Get(category entity.Category) (entity.Category, error) {
	ret := _m.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 entity.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Category) (entity.Category, error)); ok {
		return rf(category)
	}
	if rf, ok := ret.Get(0).(func(entity.Category) entity.Category); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Get(0).(entity.Category)
	}

	if rf, ok := ret.Get(1).(func(entity.Category) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCategoryInterface creates a new instance of CategoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryInterface {
	mock := &CategoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
