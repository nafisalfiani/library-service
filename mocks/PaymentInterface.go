// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	entity "library/entity"

	mock "github.com/stretchr/testify/mock"
)

// PaymentInterface is an autogenerated mock type for the PaymentInterface type
type PaymentInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: payment
func (_m *PaymentInterface) Create(payment entity.Payment) (entity.Payment, error) {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Payment) (entity.Payment, error)); ok {
		return rf(payment)
	}
	if rf, ok := ret.Get(0).(func(entity.Payment) entity.Payment); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Get(0).(entity.Payment)
	}

	if rf, ok := ret.Get(1).(func(entity.Payment) error); ok {
		r1 = rf(payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: payment
func (_m *PaymentInterface) Get(payment entity.Payment) (entity.Payment, error) {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 entity.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Payment) (entity.Payment, error)); ok {
		return rf(payment)
	}
	if rf, ok := ret.Get(0).(func(entity.Payment) entity.Payment); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Get(0).(entity.Payment)
	}

	if rf, ok := ret.Get(1).(func(entity.Payment) error); ok {
		r1 = rf(payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: userId
func (_m *PaymentInterface) List(userId int) ([]entity.Payment, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []entity.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]entity.Payment, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) []entity.Payment); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: payment
func (_m *PaymentInterface) Update(payment entity.Payment) (entity.Payment, error) {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Payment) (entity.Payment, error)); ok {
		return rf(payment)
	}
	if rf, ok := ret.Get(0).(func(entity.Payment) entity.Payment); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Get(0).(entity.Payment)
	}

	if rf, ok := ret.Get(1).(func(entity.Payment) error); ok {
		r1 = rf(payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentInterface creates a new instance of PaymentInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentInterface {
	mock := &PaymentInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
